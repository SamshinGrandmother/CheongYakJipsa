plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.0'
    id 'io.spring.dependency-management' version '1.1.5'
}

group = 'me.synn3r'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '21'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('lombokMapStructVersion', "0.2.0")
    set('querydslVersion', "5.1.0")
    set('lombokVersion', "1.18.32")
    set('mapstructVersion', "1.5.5.Final")
    set('mockitoVersion', "5.12.0")
    set('thymeleafExtraVersion', "3.1.2.RELEASE")
    set('thymeleafLayoutVersion', "2.5.3")
    set('jasyptVersion', "3.0.5")
    set('springCloudDependenciesVersion', "2023.0.5")
    set('feignClientVersion', "4.0.3")
    set('mariaDBVersion', "3.5.4")
    set('springdocOpenapiStarterWebmvcUi', "2.6.0")
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation "org.thymeleaf.extras:thymeleaf-extras-springsecurity6:${thymeleafExtraVersion}"
    implementation "nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect:${thymeleafLayoutVersion}"
    implementation 'org.springframework.boot:spring-boot-starter-batch'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springframework.boot:spring-boot-starter-quartz'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation "com.github.ulisesbocchio:jasypt-spring-boot-starter:${jasyptVersion}"
    implementation "org.springframework.cloud:spring-cloud-starter-openfeign:${feignClientVersion}"
    implementation "org.mapstruct:mapstruct:${mapstructVersion}"
    implementation "com.querydsl:querydsl-jpa:${querydslVersion}:jakarta"
    implementation "com.querydsl:querydsl-core:${querydslVersion}"
    implementation "org.mariadb.jdbc:mariadb-java-client:${mariaDBVersion}"
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:${springdocOpenapiStarterWebmvcUi}"
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor(
            "org.springframework.boot:spring-boot-configuration-processor",
            "com.querydsl:querydsl-apt:${querydslVersion}:jakarta",
            "jakarta.annotation:jakarta.annotation-api",
            "jakarta.persistence:jakarta.persistence-api",
            "org.projectlombok:lombok-mapstruct-binding:${lombokMapStructVersion}",
            "org.mapstruct:mapstruct-processor:${mapstructVersion}",
            "org.projectlombok:lombok:${lombokVersion}",
    )
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.batch:spring-batch-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation "org.mockito:mockito-core:${mockitoVersion}"
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudDependenciesVersion}"
    }
}


def querydslSrcDir = layout.buildDirectory.dir("generated/querydsl").get().asFile

compileJava {
    options.generatedSourceOutputDirectory = querydslSrcDir
    options.compilerArgs += [
            "-Amapstruct.defaultComponentModel=spring",
            "-Amapstruct.defaultInjectionStrategy=constructor",
            "-Amapstruct.unmappedTargetPolicy=IGNORE",
            "-Amapstruct.verbose=true"
    ]
}

tasks {
    clean {
        delete file(querydslSrcDir)
    }

    test {
        useJUnitPlatform()
        jvmArgs '-Xshare:off'
    }
}
